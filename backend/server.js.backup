const express = require('express');
const cors = require('cors');
const http = require('http');
const socketIo = require('socket.io');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');
require('dotenv').config();

const app = express();
const server = http.createServer(app);

// Configure Socket.IO with CORS
const io = socketIo(server, {
    cors: {
        origin: "http://localhost:3000",
        methods: ["GET", "POST"],
        credentials: true
    }
});

// Middleware
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));
app.use(express.json());

// Configure multer for file uploads
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: 'Voice AI Server is running!',
        timestamp: new Date().toISOString()
    });
});

// ElevenLabs voices configuration
const ELEVENLABS_VOICES = {
    'lili': 'EXAVITQu4vr4xnSDxMaL',
    'eric': 'ErXwobaYiN019PkySvjV', 
    'kalina': 'knrPHWnBmmDHMoiMeP3l',
    'andreea': 'ThT5KcBeYPX3keUQqHPh',
    'alexandra': 'TX3LPaxmHKxFdv7VOQHJ',
    'anca': 'XrExE9yKIg1WjnnlVkGX',
    'cristi': 'gv9OPOLgGsjJr3BRn1tQ'
};

// Text to Speech endpoint
app.post('/api/text-to-speech', async (req, res) => {
    try {
        const { text, voice = 'kalina' } = req.body;
        const voiceId = ELEVENLABS_VOICES[voice.toLowerCase()];
        
        if (!voiceId) {
            return res.status(400).json({ error: 'Invalid voice selection' });
        }

        const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
            method: 'POST',
            headers: {
                'Accept': 'audio/mpeg',
                'Content-Type': 'application/json',
                'xi-api-key': process.env.ELEVENLABS_API_KEY
            },
            body: JSON.stringify({
                text: text,
                model_id: 'eleven_monolingual_v1',
                voice_settings: {
                    stability: 0.5,
                    similarity_boost: 0.5
                }
            })
        });

        if (!response.ok) {
            throw new Error(`ElevenLabs API error: ${response.status}`);
        }

        const audioBuffer = await response.arrayBuffer();
        res.set({
            'Content-Type': 'audio/mpeg',
            'Content-Length': audioBuffer.byteLength
        });
        res.send(Buffer.from(audioBuffer));
        
    } catch (error) {
        console.error('Text-to-speech error:', error);
        res.status(500).json({ error: 'Failed to generate speech' });
    }
});

// Get available voices
app.get('/api/voices', (req, res) => {
    res.json({
        voices: Object.keys(ELEVENLABS_VOICES).map(key => ({
            id: key,
            name: key.charAt(0).toUpperCase() + key.slice(1),
            voiceId: ELEVENLABS_VOICES[key]
        }))
    });
});

// OpenAI Chat endpoint
app.post('/api/chat', async (req, res) => {
    try {
        const { message } = req.body;
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-3.5-turbo',
                messages: [
                    {
                        role: 'system',
                        content: 'You are Kalina AI, a helpful and friendly voice assistant. Keep responses conversational and under 150 words.'
                    },
                    {
                        role: 'user',
                        content: message
                    }
                ],
                max_tokens: 150,
                temperature: 0.7
            })
        });

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(`OpenAI API error: ${response.status}`);
        }

        res.json({ 
            response: data.choices[0].message.content 
        });
        
    } catch (error) {
        console.error('Chat error:', error);
        res.status(500).json({ error: 'Failed to get AI response' });
    }
});

// Socket.IO connection handling
io.on('connection', (socket) => {
    console.log('Client connected:', socket.id);
    
    // Handle voice conversation
    socket.on('start-conversation', (data) => {
        console.log('Starting conversation with voice:', data.voice);
        socket.emit('conversation-ready', { status: 'ready' });
    });
    
    // Handle audio data from client
    socket.on('audio-data', async (audioData) => {
        try {
            console.log('Received audio data, processing...');
            // Here you would typically:
            // 1. Convert audio to text (speech-to-text)
            // 2. Send to OpenAI for response
            // 3. Convert response to speech
            // 4. Send back to client
            
            // For now, let's simulate a response
            socket.emit('audio-response', {
                text: 'I heard you! This is a simulated response.',
                audioUrl: null // Will be replaced with actual audio
            });
            
        } catch (error) {
            console.error('Audio processing error:', error);
            socket.emit('error', { message: 'Failed to process audio' });
        }
    });
    
    socket.on('disconnect', () => {
        console.log('Client disconnected:', socket.id);
    });
});

const PORT = process.env.PORT || 8081;
server.listen(PORT, () => {
    console.log(`Voice AI Server running on http://localhost:${PORT}`);
    console.log('Available endpoints:');
    console.log('  GET  /health - Health check');
    console.log('  GET  /api/voices - Get available voices');
    console.log('  POST /api/text-to-speech - Convert text to speech');
    console.log('  POST /api/chat - Chat with AI');
    console.log('Socket.IO enabled for real-time communication');
});
